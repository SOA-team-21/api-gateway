version: '3.9'

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

services:
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_gateway-cont
    hostname: api_gateway
    restart: always
    networks:
      - database
      - monitoring
    ports:
      - "8083:8083"

  tours:
    build:
      dockerfile: Dockerfile
      context: ../tours/tours
    container_name: tours-cont
    restart: always
    networks:
      - database
      - monitoring
    environment:
      - JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
    ports:
      - "88:88"
    logging: *fluent-bit
    depends_on:
      tours-database:
        condition: service_healthy

  auth:
    build:
      dockerfile: Dockerfile
      context: ../auth/auth
    container_name: auth-cont
    restart: always
    networks:
      - database
    ports:
      - "90:90"
    depends_on:
      auth-database:
        condition: service_healthy

  encounters:
    build:
      dockerfile: Dockerfile
      context: ../encounters/encounters
    container_name: encounters-cont
    restart: on-failure
    ports:
      - "8082:8082"
    networks:
      - database
    environment:
      - MONGO_DB_URI=mongodb://root:pass@mongo:27017
    depends_on:
      mongo:
        condition: service_healthy

  followers:
    build:
      dockerfile: Dockerfile
      context: ../followers-management/followers
    container_name: followers-cont
    restart: always
    networks:
      - database
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=followers
    depends_on:
      neo4j:
        condition: service_healthy  

  neo4j:
    image: neo4j
    restart: always
    networks:
      - database
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test: ["CMD-SHELL", "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p followers || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/followers
    volumes:
      - neo4j_data:/data
      - type: bind
        source: ../followers-management/followers/test-data/people.sql
        target: /tmp/people.sql
      - type: bind
        source: ../followers-management/followers/test-data/users.sql
        target: /tmp/users.sql

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - database
    volumes:
      - mongo_store:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://mongo:27017/
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    networks:
      - database
    volumes:
      - mongo_express_data:/data/db

  tours-database:
    image: postgres:13
    restart: always
    networks:
      - database
      - monitoring
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: soa_tours
      PGSEARCHPATH: tours
    logging: *fluent-bit
    volumes:
      - tours-database-data:/var/lib/postgresql/data
      - type: bind
        source: ../tours/test-data/tours.sql
        target: /tmp/tours.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-database:
    image: postgres:13
    restart: always
    networks:
      - database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: soa_auth
      PGSEARCHPATH: auth
    volumes:
      - auth-database-data:/var/lib/postgresql/data
      - type: bind
        source: ../auth/test-data/users.sql
        target: /tmp/users.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  database-data:
  neo4j_data:
  tours-database-data:
  auth-database-data:
  mongo_store:
  mongo_express_data:

networks:
  database:
    driver: bridge
  monitoring:
    external: true